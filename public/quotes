<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quote Processing System</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8 max-w-5xl">
        <div class="flex justify-between items-center mb-8">
            <h1 class="text-3xl font-bold">Quote Processing System</h1>
            <div class="flex space-x-4">
                <a href="/quotes" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    All Quotes
                </a>
                <a href="/" class="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">
                    Home
                </a>
            </div>
        </div>

        <!-- Upload Form -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Upload Supplier Quote</h2>
            <div id="uploadStatus" class="hidden mb-4"></div>
            
            <form id="quoteUploadForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium mb-1" for="supplierName">
                            Supplier Name
                        </label>
                        <input type="text" id="supplierName" class="w-full p-2 border rounded" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium mb-1" for="validUntil">
                            Valid Until
                        </label>
                        <input type="date" id="validUntil" class="w-full p-2 border rounded">
                    </div>
                </div>
                
                <div>
                    <label class="block text-sm font-medium mb-1" for="quoteFile">
                        Quote Document (PDF or Image)
                    </label>
                    <input type="file" id="quoteFile" class="w-full p-2 border rounded" 
                           accept=".pdf,.png,.jpg,.jpeg" required>
                    <p class="text-sm text-gray-500 mt-1">
                        Supported formats: PDF, JPEG, PNG. Maximum size: 5MB
                    </p>
                </div>
                
                <button type="submit" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    Upload Quote
                </button>
            </form>
        </div>
        
        <!-- Processing Status (hidden by default) -->
        <div id="processingSection" class="bg-white rounded-lg shadow-md p-6 mb-8 hidden">
            <h2 class="text-xl font-semibold mb-4">Processing Quote</h2>
            <div class="flex items-center space-x-4">
                <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
                <p id="processingStatus">Starting extraction...</p>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2.5 mt-4">
                <div id="processingProgress" class="bg-blue-600 h-2.5 rounded-full w-0 transition-all duration-300"></div>
            </div>
        </div>
        
        <!-- Extracted Data Preview (hidden by default) -->
        <div id="extractedDataSection" class="bg-white rounded-lg shadow-md p-6 mb-8 hidden">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-semibold">Extracted Products</h2>
                <button id="createProductsBtn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                    Create Products in Shopify
                </button>
            </div>
            
            <div class="mb-4">
                <label class="text-sm font-medium">Markup Percentage</label>
                <div class="flex items-center space-x-2">
                    <input type="range" id="markupSlider" min="0" max="200" value="50" class="w-full">
                    <span id="markupValue">50%</span>
                </div>
            </div>
            
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                SKU
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Description
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Supplier Price
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Shopify Price
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Stock
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="extractedProductsTable" class="bg-white divide-y divide-gray-200">
                        <!-- Products will be listed here -->
                    </tbody>
                </table>
            </div>
        </div>
        
        <!-- Creation Results (hidden by default) -->
        <div id="creationResultsSection" class="bg-white rounded-lg shadow-md p-6 mb-8 hidden">
            <h2 class="text-xl font-semibold mb-4">Products Created</h2>
            <div id="creationResults" class="space-y-4">
                <!-- Results will be shown here -->
            </div>
            <div class="mt-6">
                <a href="/products" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
                    View All Products
                </a>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const uploadForm = document.getElementById('quoteUploadForm');
        const uploadStatus = document.getElementById('uploadStatus');
        const processingSection = document.getElementById('processingSection');
        const processingStatus = document.getElementById('processingStatus');
        const processingProgress = document.getElementById('processingProgress');
        const extractedDataSection = document.getElementById('extractedDataSection');
        const extractedProductsTable = document.getElementById('extractedProductsTable');
        const createProductsBtn = document.getElementById('createProductsBtn');
        const markupSlider = document.getElementById('markupSlider');
        const markupValue = document.getElementById('markupValue');
        const creationResultsSection = document.getElementById('creationResultsSection');
        const creationResults = document.getElementById('creationResults');
        
        // Current quote data
        let currentQuoteId = null;
        let extractedProducts = [];
        
        // Handle form submission
        uploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Show loading status
            uploadStatus.innerHTML = `<div class="p-4 bg-blue-100 text-blue-800 rounded">Uploading quote file...</div>`;
            uploadStatus.classList.remove('hidden');
            
            // Create FormData
            const formData = new FormData();
            formData.append('supplierName', document.getElementById('supplierName').value);
            formData.append('validUntil', document.getElementById('validUntil').value);
            formData.append('quoteFile', document.getElementById('quoteFile').files[0]);
            
            try {
                // Upload the quote file
                const response = await fetch('/api/quotes/upload', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    throw new Error(`Upload failed: ${response.status}`);
                }
                
                const data = await response.json();
                currentQuoteId = data.quote.id;
                
                // Show success message
                uploadStatus.innerHTML = `<div class="p-4 bg-green-100 text-green-800 rounded">
                    Quote uploaded successfully! Starting processing...
                </div>`;
                
                // Show processing section
                processingSection.classList.remove('hidden');
                
                // Start the processing
                startProcessing(currentQuoteId);
                
            } catch (error) {
                console.error('Error uploading quote:', error);
                uploadStatus.innerHTML = `<div class="p-4 bg-red-100 text-red-800 rounded">
                    Error: ${error.message}
                </div>`;
            }
        });
        
        // Process the uploaded quote
        async function startProcessing(quoteId) {
            try {
                // Call the processing endpoint
                const response = await fetch(`/api/quotes/${quoteId}/process`, {
                    method: 'POST'
                });
                
                if (!response.ok) {
                    throw new Error(`Processing failed: ${response.status}`);
                }
                
                // Update status and simulate progress
                simulateProcessingProgress();
                
                // After "processing" is complete, fetch the extracted data
                // In a real app, you would poll or use websockets for this
                setTimeout(() => {
                    fetchExtractedData(quoteId);
                }, 5000);
                
            } catch (error) {
                console.error('Error processing quote:', error);
                processingStatus.textContent = `Error: ${error.message}`;
                processingProgress.style.width = '0%';
            }
        }
        
        // Simulate processing progress
        function simulateProcessingProgress() {
            let progress = 0;
            const interval = setInterval(() => {
                progress += 5;
                processingProgress.style.width = `${progress}%`;
                
                if (progress === 25) {
                    processingStatus.textContent = 'Analyzing document structure...';
                } else if (progress === 50) {
                    processingStatus.textContent = 'Extracting product data...';
                } else if (progress === 75) {
                    processingStatus.textContent = 'Formatting and validating...';
                }
                
                if (progress >= 100) {
                    clearInterval(interval);
                    processingStatus.textContent = 'Processing complete!';
                }
            }, 250);
        }
        
        // Fetch the extracted data
        async function fetchExtractedData(quoteId) {
            try {
                const response = await fetch(`/api/quotes/${quoteId}`);
                
                if (!response.ok) {
                    throw new Error(`Failed to fetch extraction results: ${response.status}`);
                }
                
                const data = await response.json();
                extractedProducts = data.products;
                
                // Display the extracted data
                displayExtractedProducts();
                
                // Show the extracted data section
                extractedDataSection.classList.remove('hidden');
                
            } catch (error) {
                console.error('Error fetching extracted data:', error);
                processingStatus.textContent = `Error: ${error.message}`;
            }
        }
        
        // Display the extracted products
        function displayExtractedProducts() {
            if (!extractedProducts || extractedProducts.length === 0) {
                extractedProductsTable.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-4 text-center text-gray-500">
                            No products extracted from the quote
                        </td>
                    </tr>
                `;
                return;
            }
            
            // Calculate markup
            const markup = 1 + (parseInt(markupSlider.value) / 100);
            
            // Create table rows
            extractedProductsTable.innerHTML = extractedProducts.map((product, index) => {
                const shopifyPrice = (product.unitPrice * markup).toFixed(2);
                
                return `
                    <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            ${product.sku}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${product.description}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            R${product.unitPrice.toFixed(2)}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            R${shopifyPrice}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            ${product.availableQuantity || 'N/A'}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <button class="text-blue-600 hover:text-blue-900 edit-price" data-index="${index}">
                                Edit
                            </button>
                        </td>
                    </tr>
                `;
            }).join('');
            
            // Add edit button handlers
            document.querySelectorAll('.edit-price').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.getAttribute('data-index'));
                    const product = extractedProducts[index];
                    const newPrice = prompt(`Enter new price for ${product.description}:`, (product.unitPrice * markup).toFixed(2));
                    
                    if (newPrice && !isNaN(parseFloat(newPrice))) {
                        // Update the UI
                        const row = e.target.closest('tr');
                        row.querySelector('td:nth-child(4)').textContent = `R${parseFloat(newPrice).toFixed(2)}`;
                        
                        // In a real app, you would update the extractedProducts array
                    }
                });
            });
        }
        
        // Handle markup slider changes
        markupSlider.addEventListener('input', (e) => {
            const markup = parseInt(e.target.value);
            markupValue.textContent = `${markup}%`;
            
            // Update the displayed prices
            displayExtractedProducts();
        });
        
        // Handle create products button
        createProductsBtn.addEventListener('click', async () => {
            try {
                // Show loading state
                createProductsBtn.textContent = 'Creating...';
                createProductsBtn.disabled = true;
                
                // Get the markup value
                const markup = 1 + (parseInt(markupSlider.value) / 100);
                
                // Send request to create products
                const response = await fetch(`/api/quotes/${currentQuoteId}/create-products`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ markup })
                });
                
                if (!response.ok) {
                    throw new Error(`Failed to create products: ${response.status}`);
                }
                
                const data = await response.json();
                
                // Display results
                creationResultsSection.classList.remove('hidden');
                
                creationResults.innerHTML = `
                    <div class="p-4 bg-green-100 text-green-800 rounded mb-4">
                        Successfully created ${data.products.length} products in Shopify!
                    </div>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        SKU
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Title
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        Price
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                        View
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                ${data.products.map((product, index) => `
                                    <tr class="${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                            ${product.sku}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            ${product.title}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            R${product.price}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <a href="/product-detail.html?id=${product.id.split('/').pop()}" class="text-blue-600 hover:text-blue-900">
                                                View
                                            </a>
                                        </td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                `;
                
                // Reset button
                createProductsBtn.textContent = 'Create Products in Shopify';
                createProductsBtn.disabled = false;
                
            } catch (error) {
                console.error('Error creating products:', error);
                
                // Show error
                creationResultsSection.classList.remove('hidden');
                creationResults.innerHTML = `
                    <div class="p-4 bg-red-100 text-red-800 rounded">
                        Error creating products: ${error.message}
                    </div>
                `;
                
                // Reset button
                createProductsBtn.textContent = 'Try Again';
                createProductsBtn.disabled = false;
            }
        });
        
        // Load quotes list on page load if on the quotes page
        if (window.location.pathname === '/quotes') {
            loadQuotesList();
        }
        
        // Function to load quotes list
        async function loadQuotesList() {
            try {
                const response = await fetch('/api/quotes');
                
                if (!response.ok) {
                    throw new Error(`Failed to fetch quotes: ${response.status}`);
                }
                
                const quotes = await response.json();
                
                // Display quotes list
                const quotesList = document.getElementById('quotesList');
                if (!quotesList) return;
                
                if (quotes.length === 0) {
                    quotesList.innerHTML = `
                        <div class="text-center py-8 text-gray-500">
                            No quotes found. <a href="/quotes/upload" class="text-blue-500 hover:underline">Upload a quote</a>
                        </div>
                    `;
                    return;
                }
                
                quotesList.innerHTML = quotes.map(quote => `
                    <div class="border rounded p-4 mb-4 hover:shadow-md transition-shadow">
                        <div class="flex justify-between items-start">
                            <div>
                                <h3 class="font-semibold text-lg">${quote.supplierName}</h3>
                                <p class="text-sm text-gray-500">Uploaded: ${new Date(quote.uploadedAt).toLocaleString()}</p>
                                <p class="text-sm mt-2">Products: ${quote.productCount}</p>
                            </div>
                            <div>
                                <span class="px-2 py-1 rounded text-sm ${
                                    quote.status === 'processed' ? 'bg-green-100 text-green-800' : 
                                    quote.status === 'processing' ? 'bg-blue-100 text-blue-800' : 
                                    'bg-gray-100 text-gray-800'
                                }">
                                    ${quote.status.charAt(0).toUpperCase() + quote.status.slice(1)}
                                </span>
                            </div>
                        </div>
                        <div class="mt-4 flex justify-end space-x-2">
                            <a href="/quotes/${quote.id}" class="text-blue-500 hover:underline">View</a>
                            <a href="/quotes/${quote.id}/products" class="text-green-500 hover:underline">Products</a>
                        </div>
                    </div>
                `).join('');
                
            } catch (error) {
                console.error('Error loading quotes:', error);
                
                const quotesList = document.getElementById('quotesList');
                if (quotesList) {
                    quotesList.innerHTML = `
                        <div class="p-4 bg-red-100 text-red-800 rounded">
                            Error loading quotes: ${error.message}
                        </div>
                    `;
                }
            }
        }
    </script>
</body>
</html>
